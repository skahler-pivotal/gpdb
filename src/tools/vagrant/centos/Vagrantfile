# -*- mode: ruby -*-
# vi: set ft=ruby :

# INCLUDE
require "ipaddr"

# VM
# Using ipaddr, we can manage multiple local images and prevent conflicts
@vm_os = ENV['VM_OS'] || "bento/centos-7.5"
@vm_cpus = ENV['VM_CPUS'] || 2
@vm_memory = ENV['VM_MEMORY'] || 4096
@vm_hostname = ENV['VM_HOSTNAME'] || "gpdb-vagrant"
@vm_subnet = ENV['VM_SUBNET'] || "192.168.99.10"
@vm_ip = IPAddr.new @vm_subnet

# BUILD
# Vagrant / Ruby doesn't really provide us a nice way of sending flags
# We could use include and use GetoptLong, but this requires sticking
# varaiables between vagrant and up
@build_on_deploy = ENV['BUILD'] || true   # OS Setup Only - Manual Build / Script Testing (BUILD=false vagrant up)
@build_local = ENV['LOCAL'] || false      # Use Local Project as Source
@build_orca = ENV['ORCA'] || true         # Build w/ ORCA
@build_args = []                          # Push build arguments into the array

# Define a Template for Building All Our VMs.
# We can leverage this later to handle multiple hosts.
def build_vm( config, hostname, ip )
    config.vm.define hostname do |node|
      node.vm.hostname = hostname
      node.vm.network :private_network, :ip => ip

      node.vm.provision :hosts do |provisioner|
         provisioner.autoconfigure = true
         provisioner.sync_hosts = true
         provisioner.add_localhost_hostnames = false
       end

      node.vm.provider :virtualbox do |vb|
        vb.name = @vm_hostname
        vb.gui = false
        vb.cpus = @vm_cpus
        vb.memory = @vm_memory
        vb.customize ["storagectl", :id, "--name", "SATA Controller", "--hostiocache", "on"]
      end

    end
end

# DEPLOY
Vagrant.configure(2) do |config|
  config.vm.box = @vm_os
  config.vm.hostname = @vm_hostname

  # Master Node:
  puts "Master Hostname: #{@vm_hostname}"
  puts "Master IP: #{@vm_ip}"
  build_vm( config, "#{@vm_hostname}", "#{@vm_ip}" )

  config.vm.synced_folder File.expand_path("../../../../", Dir.pwd), "/gpdb"
  config.vm.provision "shell", path: "vagrant-setup.sh"
  config.vm.provision "shell", path: "vagrant-configure-os.sh"

  if ( @build_on_deploy == true ) then
    @build_args.push("--build-local") if @build_local
    @build_args.push("--enable-orca") if @build_orca
    puts "Build Options: #{@build_args.join(" ")}"
    config.vm.provision "shell", path: "vagrant-build-gpdb.sh", privileged: false, args: "#{@build_args.join(" ")}"
  else
    config.vm.post_up_message "Manual Deployment: /vagrant/vagrant-build-gpdb.sh [--enable-orca][--build-local]"
  end
end
